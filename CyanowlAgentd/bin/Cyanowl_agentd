#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys, os, time, atexit
from signal import SIGTERM 
sys.path.append('../Module')
import FunctionBlock
import threading
class Daemon:
    """
    A generic daemon class.
    
    Usage: subclass the Daemon class and override the _run() method
    """
    def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile
    
    def _daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced 
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """
        
        #脱离父进程
        try: 
            pid = os.fork() 
            if pid > 0: #父进程退出
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)
    
        #脱离终端
        os.setsid() 
        #修改当前工作目录  
	Dir = os.getcwd()
        os.chdir(Dir) 
        #重设文件创建权限
        os.umask(0) 
    
        #第二次fork，禁止进程重新打开控制终端
        try: 
            pid = os.fork() 
            if pid > 0: #退出控制终端
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1) 
    
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'a+')
        se = file(self.stderr, 'a+', 0)

        startmessage = "sandmok start successfull\n"
        sys.stdout.write(startmessage)

        #重定向标准输入/输出/错误
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())
    
        #注册程序退出时的函数，即删掉pid文件
        atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile,'w+').write("%s\n" % pid)
    
    def delpid(self):
        os.remove(self.pidfile)
    def start(self):
        """
        Start the daemon
        """
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
    
        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)
        
        # Start the daemon
        self._daemonize()
        self._run()

    def stop(self):
        """
        Stop the daemon
        """
        # Get the pid from the pidfile
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
    
        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return 
	# not an error in a restart
        # Try killing the child process
        #先结束子进程然后再结束父进程
        # Try killing the daemon process    
        try:
            while 1:
                os.kill(pid, SIGTERM)
                time.sleep(0.1)
                stopmessage = "sandmok stop successfull\n"
                sys.stdout.write(stopmessage)
        except OSError, err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print str(err)
                sys.exit(1)

    def status(self):
        """
        Check the daemon status
        """
        #get pid from the self.pidfile
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
	except IOError:
            pid = None
			
        if pid:
           message = "[PID:%s] sandmok agent Daemon is running...\n"
           sys.stdout.write(message % pid)
           sys.exit(0)
        else:
           message = "sandmok agent Daemon is not running!\n"
           sys.stdout.write(message)
           sys.exit(0) 
        

    def restart(self):
        """
        Restart the daemon
        """
        self.stop()
        self.start()
    def _run(self):
        """
        You should override this method when you subclass Daemon. It will be called after the process has been
        daemonized by start() or restart().
        """

class MyDaemon(Daemon):
    def _run(self):
       FUNCHILD=FunctionBlock.General()
       def pcheck():  
           try:
              FUNCHILD.PortCheck()
           except KeyboardInterrupt:
              print 'quit'
       #scan dir
       def scation():
           FUNCHILD.ScanAction()
       def server():
           FUNCHILD.TS()

       #init thread_pool 
       thread_pool = [] 
       worker = (pcheck,server)
       # init thread items 
       for i in range(2): 
           th = threading.Thread(target=worker[i],name=worker[i]) ; 
           thread_pool.append(th) 
       # start threads one by one         
       for i in range(2): 
           thread_pool[i].start() 

       #collect all threads 
       for i in range(2): 
           threading.Thread.join(thread_pool[i]) 

             
if __name__ == "__main__":
    daemon = MyDaemon('/tmp/sandmokagent.pid',stdout='../logs/sandmok.log',stderr='../logs/sandmok.log')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        elif 'status' == sys.argv[1]:
            daemon.status()
        else:
            print "Unknown parameter,Maybe you need  [start|stop|restart|status]."
            sys.exit(2)
        sys.exit(0)
    else:
        print "usage: %s [start|stop|restart|status]" % sys.argv[0]
        sys.exit(2)
